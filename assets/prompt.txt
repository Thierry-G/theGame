index.html
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>The Game</title><link rel="stylesheet" href="/assets/css/main.css"></head><body><div id="levelDisplay">Level 1</div><button id="controlButton">Play</button><select id="gameModeSelect" title="Game Mode"><option value="default">Default</option></select><canvas id="gameCanvas"></canvas><script src="/assets/js/main.js" type="module"></script></body></html>

Game.js
import Engine from"./Engine.js";export default class Game{constructor(){this.gameCanvas=document.getElementById("gameCanvas"),this.ctx=this.gameCanvas.getContext("2d"),this.controlButton=document.getElementById("controlButton"),this.levelDisplay=document.getElementById("levelDisplay"),this.gameCanvas.width=window.innerWidth,this.gameCanvas.height=window.innerHeight,this.gameMode="default",this.squareCount=4,this.rowCount=4,this.squareSize=48,this.horizontalSpeed=1,this.verticalSpeed=1,this.horizontalSpacing=(this.gameCanvas.width-this.squareCount*this.squareSize)/(this.squareCount-1),this.verticalSpacing=this.horizontalSpacing,this.horizontalPosition=0,this.verticalPosition=0,this.animationId=null,this.gameLevel=1,this.replayCount=0,this.colors=Array(this.squareCount*this.rowCount).fill("#0000FF"),this.totalSquares=0,this.squareNumbers=Array(this.squareCount*this.rowCount).fill(null),this.randomNumbers=Array(this.squareCount*this.rowCount).fill(null),this.controlButton.addEventListener("click",this.controlButtonClick.bind(this)),this.gameCanvas.addEventListener("click",this.gameCanvasClick.bind(this));document.getElementById("gameModeSelect").addEventListener("change",(t=>{this.gameMode=t.target.value})),this.engine=new Engine,this.animationFrameId=null,this.setupEventListeners()}setupEventListeners(){this.controlButton.addEventListener("click",this.controlButtonClick.bind(this)),this.gameCanvas.addEventListener("click",this.gameCanvasClick.bind(this));document.getElementById("gameModeSelect").addEventListener("change",(t=>{this.gameMode=t.target.value})),window.addEventListener("resize",(()=>{this.gameCanvas.width=window.innerWidth,this.gameCanvas.height=window.innerHeight,this.engine.updateScreenSize()}))}controlButtonClick(){"Play"===this.controlButton.innerText?this.startGame():this.stopGame()}gameCanvasClick(t){}startGame(){this.controlButton.innerText="Play",this.levelDisplay.style.visibility="visible",this.levelDisplay.innerText=`Level ${this.gameLevel}`,this.engine.updateSquareDirections(),this.animationFrameId=requestAnimationFrame((()=>{this.update()}))}startAnimation(){this.animationId=requestAnimationFrame(this.animate.bind(this))}stopGame(){this.controlButton.innerText="Play",this.levelDisplay.style.visibility="hidden",this.animationFrameId&&cancelAnimationFrame(this.animationFrameId)}drawSquare(t){this.ctx.fillStyle=t.color,this.ctx.fillRect(t.x,t.y,this.squareSize,this.squareSize)}update(){this.ctx.clearRect(0,0,this.gameCanvas.width,this.gameCanvas.height),this.engine.updateSquares();for(let t of this.engine.squares)this.drawSquare(t);this.animationFrameId=requestAnimationFrame(this.update.bind(this))}drawGrid(){for(let t=0;t<this.squareCount;t++)for(let e=0;e<this.rowCount;e++){let i=t*(this.squareSize+this.horizontalSpacing),s=e*(this.squareSize+this.verticalSpacing);this.drawSquare(i,s,this.colors[t+e*this.squareCount])}}animate(){this.ctx.clearRect(0,0,this.gameCanvas.width,this.gameCanvas.height),"default"===this.gameMode&&this.animateDefaultMode(),this.drawGrid(),this.animationId=requestAnimationFrame(this.animate.bind(this))}animateDefaultMode(){this.engine.updateSquares(),this.ctx.clearRect(0,0,this.gameCanvas.width,this.gameCanvas.height);for(let t=0;t<this.engine.squares.length;t++){const e=this.engine.squares[t];this.drawSquare(e.x,e.y,e.color)}for(let t=0;t<this.engine.squareCount*this.engine.rowCount;t++){let e=t%this.engine.squareCount,i=Math.floor(t/this.engine.squareCount);e+=this.engine.squareDirections[t].x*this.horizontalSpeed,i+=this.engine.squareDirections[t].y*this.verticalSpeed,(e<0||e>this.gameCanvas.width-this.squareSize)&&(this.engine.squareDirections[t].x*=-1),(i<0||i>this.gameCanvas.height-this.squareSize)&&(this.engine.squareDirections[t].y*=-1),this.drawSquare(e,i,this.engine.colors[t])}requestAnimationFrame((()=>this.animateDefaultMode()))}moveSquare(t,e){}generateRandomNumbers(){for(let t=0;t<this.squareCount*this.rowCount;t++)this.randomNumbers[t]=Math.floor(Math.random()*this.squareCount*this.rowCount)}generateSquareNumbers(){for(let t=0;t<this.squareCount*this.rowCount;t++)this.squareNumbers[t]=t}checkWin(){for(let t=0;t<this.squareCount*this.rowCount;t++)if(this.squareNumbers[t]!==this.randomNumbers[t])return!1;return!0}shuffleArray(t){for(let e=t.length-1;e>0;e--){let i=Math.floor(Math.random()*(e+1));[t[e],t[i]]=[t[i],t[e]]}}levelUp(){this.gameLevel++,this.levelDisplay.innerText=`Level ${this.gameLevel}`,this.squareCount++,this.rowCount++,this.squareSize-=4,this.horizontalSpeed++,this.verticalSpeed++,this.horizontalSpacing=(this.gameCanvas.width-this.squareCount*this.squareSize)/(this.squareCount-1),this.verticalSpacing=this.horizontalSpacing,this.colors=Array(this.squareCount*this.rowCount).fill("#0000FF"),this.squareNumbers=Array(this.squareCount*this.rowCount).fill(null),this.randomNumbers=Array(this.squareCount*this.rowCount).fill(null),this.generateSquareNumbers(),this.shuffleArray(this.squareNumbers)}swapSquares(t,e){let i=this.squareNumbers[t];this.squareNumbers[t]=this.squareNumbers[e],this.squareNumbers[e]=i}moveSquare(t,e){}stopAnimation(){cancelAnimationFrame(this.animationId)}animate(){this.ctx.clearRect(0,0,this.gameCanvas.width,this.gameCanvas.height),this.drawGrid(),this.animationId=requestAnimationFrame(this.animate.bind(this))}}window.onload=function(){new Game};

Fichier Engine.js
import Game from"./Game.js";export default class GameEngine{constructor(){this.squares=[],this.squareDirections=[],this.squareColors=[],this.screenWidth=window.innerWidth,this.screenHeight=window.innerHeight}updateScreenSize(){this.screenWidth=window.innerWidth,this.screenHeight=window.innerHeight}updateSquareDirections(){for(let e=0;e<this.squares.length;e++){let s=this.squares[e],i=this.squareDirections[e];s.x+=i.dx,s.y+=i.dy,(s.x<0||s.x>this.screenWidth)&&(i.dx=-i.dx),(s.y<0||s.y>this.screenHeight)&&(i.dy=-i.dy)}}addSquare(e,s,i,t,r){this.squares.push({x:e,y:s}),this.squareDirections.push({dx:i,dy:t}),this.squareColors.push(r)}updateSquares(){this.updateSquareDirections()}}

Fichier Square.js
export default class Square{constructor(t,s,e,i,h){this.ctx=t,this.l=s,this.espacementH=e,this.espacementV=i,this.colors=h,this.squareNumbers=[],this.totalSquares=0}draw(t,s,e,i){for(let h=0;h<e*i;h++){let i=Math.floor(h/e),l=h%e;t+l*(this.l+this.espacementH)>0&&t+l*(this.l+this.espacementH)<this.ctx.canvas.width&&(this.ctx.fillStyle=this.colors[h],this.ctx.fillRect(t+l*(this.l+this.espacementH),s+i*(this.l+this.espacementV),this.l,this.l),this.squareNumbers[h]||(this.totalSquares+=1,this.squareNumbers[h]=this.totalSquares),this.ctx.fillStyle="#FFFFFF",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(this.squareNumbers[h],t+l*(this.l+this.espacementH)+this.l/2,s+i*(this.l+this.espacementV)+this.l/2))}}}